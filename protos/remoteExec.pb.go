// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remoteExec.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CmdResult struct {
	Result               string   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdResult) Reset()         { *m = CmdResult{} }
func (m *CmdResult) String() string { return proto.CompactTextString(m) }
func (*CmdResult) ProtoMessage()    {}
func (*CmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{0}
}

func (m *CmdResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdResult.Unmarshal(m, b)
}
func (m *CmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdResult.Marshal(b, m, deterministic)
}
func (m *CmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdResult.Merge(m, src)
}
func (m *CmdResult) XXX_Size() int {
	return xxx_messageInfo_CmdResult.Size(m)
}
func (m *CmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_CmdResult proto.InternalMessageInfo

func (m *CmdResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type FilePath struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilePath) Reset()         { *m = FilePath{} }
func (m *FilePath) String() string { return proto.CompactTextString(m) }
func (*FilePath) ProtoMessage()    {}
func (*FilePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{1}
}

func (m *FilePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilePath.Unmarshal(m, b)
}
func (m *FilePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilePath.Marshal(b, m, deterministic)
}
func (m *FilePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePath.Merge(m, src)
}
func (m *FilePath) XXX_Size() int {
	return xxx_messageInfo_FilePath.Size(m)
}
func (m *FilePath) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePath.DiscardUnknown(m)
}

var xxx_messageInfo_FilePath proto.InternalMessageInfo

func (m *FilePath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{2}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type Tunnel struct {
	HostPort             int32    `protobuf:"varint,1,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
	VMPort               int32    `protobuf:"varint,2,opt,name=VMPort,proto3" json:"VMPort,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{3}
}

func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tunnel.Unmarshal(m, b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return xxx_messageInfo_Tunnel.Size(m)
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetHostPort() int32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *Tunnel) GetVMPort() int32 {
	if m != nil {
		return m.VMPort
	}
	return 0
}

func (m *Tunnel) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Tunnel) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Service struct {
	Address              string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol             string   `protobuf:"bytes,3,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{4}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Service) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Service) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type IsRunning struct {
	Result               bool     `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsRunning) Reset()         { *m = IsRunning{} }
func (m *IsRunning) String() string { return proto.CompactTextString(m) }
func (*IsRunning) ProtoMessage()    {}
func (*IsRunning) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{5}
}

func (m *IsRunning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsRunning.Unmarshal(m, b)
}
func (m *IsRunning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsRunning.Marshal(b, m, deterministic)
}
func (m *IsRunning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsRunning.Merge(m, src)
}
func (m *IsRunning) XXX_Size() int {
	return xxx_messageInfo_IsRunning.Size(m)
}
func (m *IsRunning) XXX_DiscardUnknown() {
	xxx_messageInfo_IsRunning.DiscardUnknown(m)
}

var xxx_messageInfo_IsRunning proto.InternalMessageInfo

func (m *IsRunning) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type Dummy struct {
	Dummy                string   `protobuf:"bytes,1,opt,name=Dummy,proto3" json:"Dummy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dummy) Reset()         { *m = Dummy{} }
func (m *Dummy) String() string { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()    {}
func (*Dummy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8429525101601a29, []int{6}
}

func (m *Dummy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dummy.Unmarshal(m, b)
}
func (m *Dummy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dummy.Marshal(b, m, deterministic)
}
func (m *Dummy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dummy.Merge(m, src)
}
func (m *Dummy) XXX_Size() int {
	return xxx_messageInfo_Dummy.Size(m)
}
func (m *Dummy) XXX_DiscardUnknown() {
	xxx_messageInfo_Dummy.DiscardUnknown(m)
}

var xxx_messageInfo_Dummy proto.InternalMessageInfo

func (m *Dummy) GetDummy() string {
	if m != nil {
		return m.Dummy
	}
	return ""
}

func init() {
	proto.RegisterType((*CmdResult)(nil), "protos.CmdResult")
	proto.RegisterType((*FilePath)(nil), "protos.FilePath")
	proto.RegisterType((*Command)(nil), "protos.Command")
	proto.RegisterType((*Tunnel)(nil), "protos.Tunnel")
	proto.RegisterType((*Service)(nil), "protos.Service")
	proto.RegisterType((*IsRunning)(nil), "protos.IsRunning")
	proto.RegisterType((*Dummy)(nil), "protos.Dummy")
}

func init() { proto.RegisterFile("remoteExec.proto", fileDescriptor_8429525101601a29) }

var fileDescriptor_8429525101601a29 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x4b, 0x03, 0x31,
	0x14, 0xec, 0xf7, 0xc7, 0x03, 0x6b, 0x0d, 0x22, 0x4b, 0x45, 0x91, 0xf5, 0x22, 0x08, 0x45, 0x14,
	0xf4, 0x5c, 0x56, 0xad, 0x3d, 0x08, 0xcb, 0x56, 0xbd, 0xd7, 0xe6, 0xa1, 0x85, 0x4d, 0x22, 0x49,
	0x56, 0xf4, 0x7f, 0xf8, 0x83, 0x25, 0x9f, 0xa5, 0x52, 0x4f, 0x79, 0x93, 0x37, 0xb3, 0xc3, 0xce,
	0x04, 0x86, 0x12, 0x99, 0xd0, 0x78, 0xf7, 0x85, 0xcb, 0xf1, 0x87, 0x14, 0x5a, 0x90, 0x8e, 0x3d,
	0x54, 0x7a, 0x0a, 0xfd, 0x8c, 0xd1, 0x02, 0x55, 0x55, 0x6a, 0x72, 0x00, 0x1d, 0x37, 0x25, 0xf5,
	0x93, 0xfa, 0x59, 0xbf, 0xf0, 0x28, 0x3d, 0x86, 0xde, 0xfd, 0xaa, 0xc4, 0x7c, 0xa1, 0xdf, 0x09,
	0x81, 0x96, 0x39, 0x3d, 0xc3, 0xce, 0xe9, 0x21, 0x74, 0x33, 0xc1, 0xd8, 0x82, 0x53, 0x32, 0x84,
	0x66, 0xc6, 0xa8, 0xdf, 0x9a, 0x31, 0x95, 0xd0, 0x79, 0xaa, 0x38, 0xc7, 0x92, 0x8c, 0xa0, 0xf7,
	0x20, 0x94, 0xce, 0x85, 0x74, 0x06, 0xed, 0x22, 0x62, 0x63, 0xfd, 0xf2, 0x68, 0x37, 0x0d, 0xbb,
	0xf1, 0xc8, 0x68, 0x9e, 0x15, 0x4a, 0xbe, 0x60, 0x98, 0x34, 0xed, 0x47, 0x23, 0x26, 0x09, 0x74,
	0x27, 0x94, 0x4a, 0x54, 0x2a, 0x69, 0xd9, 0x55, 0x80, 0xe9, 0x1c, 0xba, 0x73, 0x94, 0x9f, 0xab,
	0xe5, 0x06, 0xa9, 0xbe, 0x41, 0xb2, 0x7f, 0xb2, 0x36, 0x6c, 0x05, 0xbb, 0xdc, 0x04, 0xb3, 0x14,
	0x65, 0xb0, 0x0b, 0xd8, 0x44, 0x35, 0x53, 0x45, 0xc5, 0xf9, 0x8a, 0xbf, 0xfd, 0x89, 0xaa, 0x17,
	0xa3, 0x3a, 0x82, 0xf6, 0x6d, 0xc5, 0xd8, 0x37, 0xd9, 0xf7, 0x83, 0x77, 0x75, 0xe0, 0xf2, 0xa7,
	0x01, 0x50, 0xc4, 0x2e, 0xc8, 0x39, 0xb4, 0xa7, 0xa8, 0x67, 0x39, 0xd9, 0x71, 0xb5, 0xa8, 0xb1,
	0xa5, 0x8d, 0xf6, 0x02, 0x8c, 0xdd, 0xa4, 0x35, 0x72, 0x03, 0x83, 0x29, 0x6a, 0x53, 0x44, 0x26,
	0xb8, 0x46, 0xae, 0xc9, 0x30, 0xd0, 0x42, 0x3b, 0xdb, 0x85, 0xd7, 0x30, 0x30, 0x6e, 0x95, 0xc6,
	0xd0, 0xd2, 0x6e, 0xa4, 0xb9, 0x8b, 0xed, 0xba, 0x0b, 0xe8, 0x4f, 0x28, 0xf5, 0xe5, 0x0d, 0x02,
	0xc3, 0xe1, 0x7f, 0x9d, 0x7c, 0xee, 0x21, 0xa7, 0xe8, 0xe4, 0xef, 0xd7, 0xba, 0x98, 0x65, 0x5a,
	0x7b, 0x75, 0xaf, 0xf1, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff, 0x47, 0xdb, 0xa5, 0x05, 0xa8, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteExecClient is the client API for RemoteExec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteExecClient interface {
	GetIP(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (*CmdResult, error)
	GetFileContent(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*CmdResult, error)
	ExecuteCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CmdResult, error)
	AddTunnel(ctx context.Context, in *Tunnel, opts ...grpc.CallOption) (*CmdResult, error)
	ServiceRunning(ctx context.Context, in *Service, opts ...grpc.CallOption) (*IsRunning, error)
}

type remoteExecClient struct {
	cc *grpc.ClientConn
}

func NewRemoteExecClient(cc *grpc.ClientConn) RemoteExecClient {
	return &remoteExecClient{cc}
}

func (c *remoteExecClient) GetIP(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (*CmdResult, error) {
	out := new(CmdResult)
	err := c.cc.Invoke(ctx, "/protos.RemoteExec/GetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteExecClient) GetFileContent(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*CmdResult, error) {
	out := new(CmdResult)
	err := c.cc.Invoke(ctx, "/protos.RemoteExec/GetFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteExecClient) ExecuteCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CmdResult, error) {
	out := new(CmdResult)
	err := c.cc.Invoke(ctx, "/protos.RemoteExec/ExecuteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteExecClient) AddTunnel(ctx context.Context, in *Tunnel, opts ...grpc.CallOption) (*CmdResult, error) {
	out := new(CmdResult)
	err := c.cc.Invoke(ctx, "/protos.RemoteExec/AddTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteExecClient) ServiceRunning(ctx context.Context, in *Service, opts ...grpc.CallOption) (*IsRunning, error) {
	out := new(IsRunning)
	err := c.cc.Invoke(ctx, "/protos.RemoteExec/ServiceRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteExecServer is the server API for RemoteExec service.
type RemoteExecServer interface {
	GetIP(context.Context, *Dummy) (*CmdResult, error)
	GetFileContent(context.Context, *FilePath) (*CmdResult, error)
	ExecuteCommand(context.Context, *Command) (*CmdResult, error)
	AddTunnel(context.Context, *Tunnel) (*CmdResult, error)
	ServiceRunning(context.Context, *Service) (*IsRunning, error)
}

// UnimplementedRemoteExecServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteExecServer struct {
}

func (*UnimplementedRemoteExecServer) GetIP(ctx context.Context, req *Dummy) (*CmdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (*UnimplementedRemoteExecServer) GetFileContent(ctx context.Context, req *FilePath) (*CmdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileContent not implemented")
}
func (*UnimplementedRemoteExecServer) ExecuteCommand(ctx context.Context, req *Command) (*CmdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (*UnimplementedRemoteExecServer) AddTunnel(ctx context.Context, req *Tunnel) (*CmdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTunnel not implemented")
}
func (*UnimplementedRemoteExecServer) ServiceRunning(ctx context.Context, req *Service) (*IsRunning, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRunning not implemented")
}

func RegisterRemoteExecServer(s *grpc.Server, srv RemoteExecServer) {
	s.RegisterService(&_RemoteExec_serviceDesc, srv)
}

func _RemoteExec_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dummy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteExecServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RemoteExec/GetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteExecServer).GetIP(ctx, req.(*Dummy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteExec_GetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteExecServer).GetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RemoteExec/GetFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteExecServer).GetFileContent(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteExec_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteExecServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RemoteExec/ExecuteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteExecServer).ExecuteCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteExec_AddTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteExecServer).AddTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RemoteExec/AddTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteExecServer).AddTunnel(ctx, req.(*Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteExec_ServiceRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteExecServer).ServiceRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RemoteExec/ServiceRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteExecServer).ServiceRunning(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteExec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RemoteExec",
	HandlerType: (*RemoteExecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIP",
			Handler:    _RemoteExec_GetIP_Handler,
		},
		{
			MethodName: "GetFileContent",
			Handler:    _RemoteExec_GetFileContent_Handler,
		},
		{
			MethodName: "ExecuteCommand",
			Handler:    _RemoteExec_ExecuteCommand_Handler,
		},
		{
			MethodName: "AddTunnel",
			Handler:    _RemoteExec_AddTunnel_Handler,
		},
		{
			MethodName: "ServiceRunning",
			Handler:    _RemoteExec_ServiceRunning_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remoteExec.proto",
}
